source $HOME/.zshrc.local

# Path

#export PATH=$(tr -d $'\n ' <<< "
   #/Library/Frameworks/Python.framework/Versions/3.10/bin:
   #$GOPATH/bin:
   #$GOPATH/bin/darwin_amd64:
   #$GOPATH/bin/darwin_arm64:
   #$HOME/repos/go/bin:
   #$HOME/.local/bin:
   #$HOME/.cargo/bin:
   #/usr/local/bin:
   #/usr/local/sbin:
   #/usr/local/opt/openjdk/bin:
   #$HOME/scripts:
   #${PATH}
#")


export PATH="$$HOME/scripts:HOME/.local/bin:${PATH}"
export PATH="/Library/Frameworks/Python.framework/Versions/3.10/bin:${PATH}"

# GO
export PATH="$GOPATH/bin:$HOME/repos/go/bin:$GOPATH/bin/darwin_amd64:$GOPATH/bin/darwin_arm64:${PATH}"

# Rust modules install to user
export PATH="$HOME/.cargo/bin:${PATH}"

# Homebrew
export PATH="/usr/local/bin:/usr/local/sbin:/usr/local/opt/openjdk/bin:$PATH"


# Environment variables
export DISPLAY=:0
export WORDCHARS='*?_-.[]~=&;!#$%^(){}<>|'
export WORKON_HOME=$HOME/.virtualenvs
export VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python3
export VIRTUALENVWRAPPER_VIRTUALENV=/usr/local/bin/virtualenv
export VIRTUALENVWRAPPER_WORKON_CD=False
export GOOGLE_APPLICATION_CREDENTIALS=~/PyPi-42f44041fd99.json
export GOPATH="$HOME/go:$HOME/repos/go"
export GOOS=darwin
export GOARCH=arm64
export EDITOR=/opt/homebrew/bin/nvim
export VISUAL=/opt/homebrew/bin/nvim

# Aliases
alias ssh="ssh -l ${ADMIN}"
alias rg=hg
alias grep='egrep --color'
alias getip='ifconfig | egrep -A3 "^(en0|en8)"; echo ---; ifconfig | egrep -A2 "^(gpd0)"; echo ---; echo -n "Internet: "; curl ipecho.net/plain; echo'
alias dotfiles='/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME'
alias python='/usr/local/bin/python3.10'
alias pip='/usr/local/bin/pip3.10'
alias get-panw-config='get-panw-config -K'
alias run-panw-cmd='run-panw-cmd -K'
alias mtr='sudo mtr'
alias dc='docker-compose'
alias bfg='java -jar ~/bfg/bfg-1.13.1.jar'
alias v=nvim
alias vi=nvim
alias vim=nvim
alias ls='lsd --hyperlink=always'
alias ll='lsd -l --hyperlink=always'
alias rm=trash
alias icat='kitty +kitten icat'
alias lf=lfcd
alias pp='curl http://parrot.live'
alias tree='tre --color=always'
alias cmatrix='cmatrix -ab'
alias pan-os-php='php -r "require_once '\''$HOME/pan-configurator/utils/pan-os-php.php'\'';" $@'
alias dig='dig +search'
alias tn='tmux new -s $(pwd | sed -E '\''s/.*\/\.?//g'\'') || tmux a -t $(pwd | sed -E '\''s/.*\/\.?//g'\'')'
alias ts='tmux a -t $(tmux list-sessions | fzf | sed -E '\''s/([^:]+).*/\1/'\'')'
alias fw='panos-cli panorama get firewalls --terse | fzf'
alias fwa='panos-cli panorama get firewalls -s active,standalone --terse | fzf'
alias fwssh="panos-cli panorama get firewalls --terse | fzf | xargs -I {} tmux neww -n {} ssh ${ADMIN}@{}"
alias fwassh="panos-cli panorama get firewalls -s active,standalone --terse | fzf | xargs -I {} tmux neww -n {} ssh ${ADMIN}@{}"
alias fwweb="panos-cli panorama get firewalls --terse | fzf | xargs -I {} open https://{}.${DOMAIN}"
alias fwaweb="panos-cli panorama get firewalls -s active,standalone --terse | fzf | xargs -I {} open https://{}.${DOMAIN}"
alias fwscrt="panos-cli panorama get firewalls --terse | fzf | xargs -I {} /Applications/SecureCRT.app/Contents/MacOS/SecureCRT /T /SSH2 {} /AUTH publickey /L ${ADMIN}"
alias fwascrt="panos-cli panorama get firewalls -s active,standalone --terse | fzf | xargs -I {} /Applications/SecureCRT.app/Contents/MacOS/SecureCRT /T /SSH2 {} /AUTH publickey /L ${ADMIN}"

# Initialize the Starship prompt
eval "$(starship init zsh)"

neofetch

# Oh-My-Zsh settings
export ZSH=$HOME/.oh-my-zsh
HYPHEN_INSENSITIVE="true"
DISABLE_AUTO_UPDATE="true"
COMPLETION_WAITING_DOTS="true"
plugins=(
    ansible
    docker
    docker-compose
    git
    macos
    nmap
    pip
    python
    rsync
    sudo
    virtualenvwrapper
    vscode
    zsh-syntax-highlighting
)
source $ZSH/oh-my-zsh.sh

fpath=( ~/.zshfuncs "${fpath[@]}" )
autoload -Uz _fzf_comprun
autoload -Uz lfcd
autoload -Uz t

# Kitty terminal settings
if test -n "$KITTY_INSTALLATION_DIR"; then
    export KITTY_SHELL_INTEGRATION="enabled"
    autoload -Uz -- "$KITTY_INSTALLATION_DIR"/shell-integration/zsh/kitty-integration
    kitty-integration
    unfunction kitty-integration
fi
bindkey "^[[1;3C" forward-word  # alt+right
bindkey "^[[1;3D" backward-word # alt+left
bindkey "^[[1;3A" beginning-of-history  # alt+up
bindkey "^[[1;3B" end-of-history    # alt+down
bindkey "^P" up-line-or-beginning-search
bindkey "^N" down-line-or-beginning-search

# Homebrew
eval "$(/opt/homebrew/bin/brew shellenv)"

# fzf settings
export FZF_DEFAULT_COMMAND="\rg -uu --files --hidden -H --glob='!**/.git/' 2> /dev/null"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_CTRL_T_OPTS="--preview='bat --style=numbers --color=always --line-range :500 {}'"
export FZF_ALT_C_COMMAND="fd -t d --strip-cwd-prefix --hidden --exclude '.git' 2> /dev/null"
export FZF_ALT_C_OPTS="--preview 'tre --color=always {} | head -500'"
# export FZF_CTRL_R_OPTS=""
# export FZF_TMUX_OPTS=""
export FZF_MOVEMENT="\
    --bind='alt-p:toggle-preview' \
    --bind='alt-i:preview-half-page-up' \
    --bind='alt-u:preview-half-page-down' \
    --bind='alt-y:yank' \
    --bind='ctrl-y:kill-line' \
    --bind='alt-g:ignore' \
    --bind='ctrl-b:first' \
    --bind='ctrl-t:last' \
    --bind='alt-j:down'
    --bind='alt-k:up'
    --bind='alt-space:toggle'
    --bind='ctrl-space:toggle'
    --bind='ctrl-a:select-all' \
    --bind='alt-a:deselect-all' \
    --bind='alt-s:toggle-sort' \
    --bind='alt-h:backward-char+refresh-preview' \
    --bind='alt-l:forward-char+refresh-preview' \
    --bind='ctrl-l:clear-screen'"
export FZF_DEFAULT_OPTS="\
    $FZF_MOVEMENT \
    --bind='ctrl-h:execute(moreman {})' \
    --bind='ctrl-v:execute(nvimpager {})' \
    --tiebreak='length,index' \
    --preview-window 'right:100:wrap' \
    --layout=default \
    --height=100 \
    --info='inline' \
    --multi \
    --ansi"

if [[ -z "$DISPLAY" ]]; then
    FZF_DEFAULT_OPTS+="
        --color=info:1 \
        --color=prompt:2 \
        --color=pointer:3 \
        --color=hl+:4 \
        --color=marker:6 \
        --color=spinner:7 \
        --color=header:8 \
        --color=border:9 \
        --color=hl:122 \
        --color=preview-fg:11 \
        --color=fg:13 \
        --color=fg+:14"
fi
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Disable Cowsay in Ansible
export ANSIBLE_NOCOWS=1

# Slack webhook for notifications
slackit() {
    http -q $WEBHOOK_WORK <<< '{"text":"Test"}'
}

# Change directories efficiently
eval "$(zoxide init zsh)"

# Rust package manager (Cargo)
. "$HOME/.cargo/env"

# Node Version Manager
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

# Needed to trust Ansible Galaxy API certificate
# https://stackoverflow.com/a/57795811
CERT_PATH=$(python -m certifi)
export SSL_CERT_FILE=${CERT_PATH}
export REQUESTS_CA_BUNDLE=${CERT_PATH}

# I don't think this is being used
#compdef _rg hg
