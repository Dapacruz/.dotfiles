source $HOME/.zshrc.local


# Path
# GO
PATH="${HOME}/go/bin:${PATH}"
# Rust modules install to user
PATH="${HOME}/.cargo/bin:${PATH}"
# Homebrew
eval "$(/opt/homebrew/bin/brew shellenv)"
# Python
PYTHON_VERSION="3.12"
PATH="${HOME}/venv/${PYTHON_VERSION}/bin:${PATH}"
PATH="${HOME}/.local/bin:${PATH}"
export PATH


# Environment variables
export DISPLAY=:0
export EDITOR=/opt/homebrew/bin/nvim
export VISUAL=/opt/homebrew/bin/nvim
export GOOS=darwin
export GOOGLE_APPLICATION_CREDENTIALS=~/PyPi-42f44041fd99.json
export WORDCHARS='*?_-.[]~=&;!#$%^(){}<>|'
export XDG_CONFIG_HOME="$HOME/.config"
export HISTCONTROL=ignorespace
export HISTSIZE=100000
export SAVEHIST=100000
export VI_MODE_SET_CURSOR=true


# # Zsh options
setopt EXTENDED_HISTORY # Write the history file in the ":start:elapsed;command" format.
setopt HIST_BEEP # Beep when accessing nonexistent history.
setopt HIST_IGNORE_ALL_DUPS # do not put duplicated command into history list
setopt HIST_REDUCE_BLANKS # Remove superfluous blanks before recording entry.
setopt HIST_REDUCE_BLANKS # remove unnecessary blanks
setopt HIST_SAVE_NO_DUPS # do not save duplicated command
setopt INC_APPEND_HISTORY_TIME # append command to history file immediately after execution


# GPG
export GPG_TTY=$(tty)


# Oh-My-Zsh settings
export ZSH=$HOME/.oh-my-zsh
HYPHEN_INSENSITIVE="true"
DISABLE_AUTO_UPDATE="true"
COMPLETION_WAITING_DOTS="true"
plugins=(
    vi-mode
    ansible
    docker
    docker-compose
    git
    macos
    nmap
    pip
    python
    rsync
    sudo
    vscode
    zsh-syntax-highlighting
)
source $ZSH/oh-my-zsh.sh


# Aliases
alias bfg='/opt/homebrew/bin/bfg'
alias cat='bat'
alias cmatrix='cmatrix -ab'
alias dig='dig +search'
alias digb='dig +search +noall +answer'
alias fd='fd --hyperlink=always'
alias fw='panos-cli panorama get firewalls --not-tag staging,disable-ansible --terse | fzf'
alias fwa='panos-cli panorama get firewalls -s active,standalone --not-tag staging,disable-ansible --terse | fzf'
alias fwascrt="panos-cli panorama get firewalls --not-tag staging,disable-ansible -s active,standalone --terse | fzf | xargs -I {} /Applications/SecureCRT.app/Contents/MacOS/SecureCRT /T /SSH2 {} /AUTH publickey /L ${ADMIN}"
alias fwassh="panos-cli panorama get firewalls --not-tag staging,disable-ansible -s active,standalone --terse | fzf | xargs -I {} tmux neww -n {} ssh -J ${ADMIN}@$JUMPHOST ${ADMIN}@{}"
alias fwaweb="panos-cli panorama get firewalls --not-tag staging,disable-ansible -s active,standalone --terse | fzf | xargs -I {} open https://{}.${DOMAIN}"
alias fwscrt="panos-cli panorama get firewalls --not-tag staging,disable-ansible --terse | fzf | tr 'a-z' 'A-Z' | xargs -I {} /Applications/SecureCRT.app/Contents/MacOS/SecureCRT /T /SSH2 {} /AUTH publickey /L ${ADMIN}"
alias fwssh="panos-cli panorama get firewalls --not-tag staging,disable-ansible --terse | fzf | xargs -I {} tmux neww -n {} ssh -J ${ADMIN}@$JUMPHOST ${ADMIN}@{}"
alias fwweb="panos-cli panorama get firewalls --not-tag staging,disable-ansible --terse | fzf | xargs -I {} open https://{}.${DOMAIN}"
alias getip='ifconfig | egrep -v "\s+(options|ether|inet6)" | egrep -A1 "^(en0|en10)"; echo --; ifconfig | egrep -A1 "^(utun3)"; echo --; echo -n "Internet IP Address: "; curl ipecho.net/plain; echo'
alias grep='egrep --color'
alias icat='kitten icat'
alias k=kubecolor
alias kc="kubecolor config get-contexts | grep -v ^CURRENT | awk '{print \$2}' | fzf | xargs kubecolor config use-context"
alias kga='kubecolor get all'
alias kgA='kubecolor get all -A'
alias kgc='kubecolor config get-contexts'
alias kgp='kubecolor get pods'
alias kn="kubecolor get ns | grep -v ^NAME | awk '{print \$1}' | fzf | xargs kubecolor config set-context --current --namespace"
alias lf=lfcd
alias lg=lazygit
alias l='lsd --group-directories-first --hyperlink=always -la'
alias ll='lsd --group-directories-first --hyperlink=always -l'
alias ls='lsd --group-directories-first --hyperlink=always'
alias mkenv='eval $(minikube -p minikube docker-env)'
alias mkstart='minikube start --driver=qemu && eval $(minikube -p minikube docker-env)'
alias mkstop='minikube stop'
alias mtr='sudo mtr'
alias pip3.12="${HOME}/venv/3.12/bin/pip"
alias pip3.13="${HOME}/venv/3.13/bin/pip"
alias pip3="python${PYTHON_VERSION} -m pip"
alias pip=pip3
alias pp='curl http://parrot.live'
alias python3.12="${HOME}/venv/3.12/bin/python"
alias python3.13="${HOME}/venv/3.13/bin/python"
alias python3="python${PYTHON_VERSION}"
alias python=python3
alias rg="kitten hyperlinked_grep --smart-case"
alias rm=trash
alias sed="sed -E"
alias t=t.sh
alias ta='tmux attach || tmux'
alias tn='tmux new -s $(pwd | sed -E '\''s/.*\/\.?//g'\'') || tmux a -t $(pwd | sed -E '\''s/.*\/\.?//g'\'')'
alias tree='tre --color=always'
alias ts='tmux a -t $(tmux list-sessions | fzf | sed -E '\''s/([^:]+).*/\1/'\'')'
alias unlock-openpgp='echo "\nOpenPGP unlocked." | gpg -ear David | gpg -dr David'
alias v=nvim
alias vdiff='nvim -d'
alias vi=nvim
alias vim=nvim


# Initialize the Starship prompt
eval "$(/opt/homebrew/bin/starship init zsh)"


# Execute neofetch
# /opt/homebrew/bin/neofetch


# Load custom Zsh functions
fpath=( ~/.zsh.d ~/.zsh.funcs "${fpath[@]}" )
autoload -Uz compinit && compinit
# autoload -Uz _fzf_comprun
autoload -Uz lfcd
autoload -Uz encrypt
autoload -Uz decrypt
autoload -Uz pass_func


# Integrate Kitty hyperlinked_grep with ripgrep
compdef _rg hg


# Kitty terminal settings
if test -n "$KITTY_INSTALLATION_DIR"; then
    export KITTY_SHELL_INTEGRATION="enabled"
    autoload -Uz -- "$KITTY_INSTALLATION_DIR"/shell-integration/zsh/kitty-integration
    kitty-integration
    unfunction kitty-integration
fi
WORDCHARS='_-*'
bindkey "^[[1;3C" forward-word  # alt+right
bindkey "^[[1;3D" backward-word # alt+left
bindkey "^[[1;3A" beginning-of-history  # alt+up
bindkey "^[[1;3B" end-of-history    # alt+down
bindkey "^P" up-line-or-beginning-search
bindkey "^N" down-line-or-beginning-search


# Disable Cowsay in Ansible
export ANSIBLE_NOCOWS=1


# Slack webhook for notifications
slackit() {
    http -q $WEBHOOK_WORK <<< "{\"text\":\"$1\"}"
}


# Change directories efficiently
eval "$(zoxide init zsh)"


# Rust package manager (Cargo)
. "${HOME}/.cargo/env"


# Node Version Manager
export NVM_DIR="${HOME}/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"


# Needed to trust Ansible Galaxy API certificate
# https://stackoverflow.com/a/57795811
# CERT_PATH=$(python3 -m certifi)
# export SSL_CERT_FILE=${CERT_PATH}
# export REQUESTS_CA_BUNDLE=${CERT_PATH}


# Python uv
eval "$(uv generate-shell-completion zsh)"


# fzf settings
export FZF_DEFAULT_COMMAND="\rg -uu --files --hidden -H --glob='!**/.git/' 2> /dev/null"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_CTRL_T_OPTS="
    --preview='bat --style=numbers --color=always --line-range :500 {}'
    --walker-skip .git,node_modules,target
    --bind 'ctrl-/:change-preview-window(down|hidden|)'"
export FZF_ALT_C_COMMAND="fd -t d --strip-cwd-prefix --hidden --exclude '.git' 2> /dev/null"
export FZF_ALT_C_OPTS="
    --walker-skip .git,node_modules,target
    --preview 'tre --color=always {} | head -500'
    --bind 'ctrl-/:change-preview-window(down|hidden|)'"
export FZF_CTRL_R_OPTS="
  --bind 'ctrl-y:execute-silent(echo -n {2..} | pbcopy)+abort'
  --color header:italic
  --header 'Press CTRL-Y to copy command into clipboard'"
# export FZF_TMUX_OPTS=""
export FZF_MOVEMENT="\
    --bind='alt-p:toggle-preview' \
    --bind='alt-i:preview-half-page-up' \
    --bind='alt-u:preview-half-page-down' \
    --bind='alt-y:yank' \
    --bind='ctrl-y:kill-line' \
    --bind='alt-g:ignore' \
    --bind='ctrl-b:first' \
    --bind='ctrl-t:last' \
    --bind='alt-j:down'
    --bind='alt-k:up'
    --bind='alt-space:toggle'
    --bind='ctrl-space:toggle'
    --bind='ctrl-a:select-all' \
    --bind='alt-a:deselect-all' \
    --bind='alt-s:toggle-sort' \
    --bind='alt-h:backward-char+refresh-preview' \
    --bind='alt-l:forward-char+refresh-preview' \
    --bind='ctrl-l:clear-screen'"
export FZF_DEFAULT_OPTS="\
    $FZF_MOVEMENT \
    --bind='ctrl-h:execute(moreman {})' \
    --bind='ctrl-v:execute(nvimpager {})' \
    --tiebreak='length,index' \
    --preview-window 'right:100:wrap' \
    --layout=default \
    --height=100 \
    --info='inline' \
    --multi \
    --ansi"

if [[ -z "$DISPLAY" ]]; then
    FZF_DEFAULT_OPTS+="
        --color=info:1 \
        --color=prompt:2 \
        --color=pointer:3 \
        --color=hl+:4 \
        --color=marker:6 \
        --color=spinner:7 \
        --color=header:8 \
        --color=border:9 \
        --color=hl:122 \
        --color=preview-fg:11 \
        --color=fg:13 \
        --color=fg+:14"
fi

_fzf_compgen_path() {
  fd --hidden --follow --exclude ".git" . "$1"
}

# Use fd to generate the list for directory completion
_fzf_compgen_dir() {
  fd --type d --hidden --follow --exclude ".git" . "$1"
}

source <(fzf --zsh)

# Make "kubecolor" borrow the same completion logic as "kubectl"
compdef kubecolor=kubectl


### MANAGED BY RANCHER DESKTOP START (DO NOT EDIT)
export PATH="/Users/dacruz/.rd/bin:$PATH"
### MANAGED BY RANCHER DESKTOP END (DO NOT EDIT)
