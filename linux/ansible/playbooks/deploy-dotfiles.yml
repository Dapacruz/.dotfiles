---
- name: Deploy .dotfiles on Linux
  hosts: localhost
  gather_facts: true

  tasks:
    - name: Install Ansible Galaxy community.general collection
      command: ansible-galaxy collection install community.general
      register: result
      changed_when: "'Nothing to do.' not in result.stdout"

    - name: Add Vivaldi APT repo
      block:
        - name: Download the Vivaldi repo key to /tmp
          ansible.builtin.get_url:
            url: https://repo.vivaldi.com/stable/linux_signing_key.pub
            dest: /tmp/vivaldi-key.pub
            mode: '0644'

        - name: Convert Vivaldi key to binary .gpg
          ansible.builtin.command:
            cmd: "gpg --batch --dearmor -o /usr/share/keyrings/vivaldi-browser.gpg /tmp/vivaldi-key.pub"
          args:
            creates: /usr/share/keyrings/vivaldi-browser.gpg
          become: true

        - name: Add the APT repository
          ansible.builtin.apt_repository:
            repo: "deb [signed-by=/usr/share/keyrings/vivaldi-browser.gpg] https://repo.vivaldi.com/stable/deb/ stable main"
            state: present
            filename: "vivaldi"
            update_cache: yes
          become: true

    - name: Install APT packages
      apt:
        name:
          - build-essential
          - curl
          - keepassxc
          - vivaldi-stable
          - zsh
        state: present
        update_cache: yes
      become: true

    - name: Clone .dotfiles repository
      ansible.builtin.git:
        repo: https://github.com/Dapacruz/.dotfiles.git
        dest: ~/.dotfiles
        clone: yes
        update: no

    - name: Set default shell to Zsh
      user:
        name: "{{ ansible_user_id }}"
        shell: /home/linuxbrew/.linuxbrew/bin/zsh
      become: true

    - name: Check if Oh My Zsh is installed
      ansible.builtin.stat:
        path: ~/.oh-my-zsh
      register: ohmyzsh

    - name: Install Oh My Zsh
      block:
        - name: Download Oh My Zsh installation script
          get_url:
            url: https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh
            dest: /tmp/install_ohmyzsh.sh
            mode: '0755'
          become: false

        - name: Run Oh My Zsh installation script
          command: sh /tmp/install_ohmyzsh.sh --unattended
          become: false
          register: ohmyzsh_result
          failed_when: "'FAILED' in ohmyzsh_result.stderr"
      when: not ohmyzsh.stat.exists

    - name: Check if Kitty is installed
      ansible.builtin.stat:
        path: ~/.local/kitty.app/bin/kitty
      register: kitty

    - name: Install Kitty terminal
      block:
        - name: Download Kitty installation script
          get_url:
            url: https://sw.kovidgoyal.net/kitty/installer.sh
            dest: /tmp/install_kitty.sh
            mode: '0755'
          become: false

        - name: Run Kitty installation script
          command: sh /tmp/install_kitty.sh launch=n
          become: false
          register: kitty_result
          failed_when: "'FAILED' in kitty_result.stderr"

        - name: Run Kitty installation script
          ansible.builtin.shell: |
            /tmp/install_kitty.sh launch=n

            # Create symbolic links to add kitty and kitten to PATH (assuming ~/.local/bin is in
            # your system-wide PATH)
            ln -sf ~/.local/kitty.app/bin/kitty ~/.local/kitty.app/bin/kitten ~/.local/bin/

            # Place the kitty.desktop file somewhere it can be found by the OS
            cp ~/.local/kitty.app/share/applications/kitty.desktop ~/.local/share/applications/

            # If you want to open text files and images in kitty via your file manager also add the kitty-open.desktop file
            cp ~/.local/kitty.app/share/applications/kitty-open.desktop ~/.local/share/applications/

            # Update the paths to the kitty and its icon in the kitty desktop file(s)
            sed -i "s|Icon=kitty|Icon=$(readlink -f ~)/.local/kitty.app/share/icons/hicolor/256x256/apps/kitty.png|g" ~/.local/share/applications/kitty*.desktop
            sed -i "s|Exec=kitty|Exec=$(readlink -f ~)/.local/kitty.app/bin/kitty|g" ~/.local/share/applications/kitty*.desktop

            # Make xdg-terminal-exec (and hence desktop environments that support it use kitty)
            echo 'kitty.desktop' > ~/.config/xdg-terminals.list
          args:
            executable: /usr/bin/sh
          register: kitty_result
          failed_when: "'FAILED' in kitty_result.stderr"
          become: false
      when: not kitty.stat.exists

    - name: Check if Homebrew is installed
      ansible.builtin.stat:
        path: /home/linuxbrew/.linuxbrew/bin/brew
      register: homebrew

    - name: Install Homebrew
      block:
        - name: Download Homebrew installation script
          get_url:
            url: https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh
            dest: /tmp/install_homebrew.sh
            mode: '0755'
          become: false

        - name: Run Homebrew installation script
          ansible.builtin.shell: CI=1 /tmp/install_homebrew.sh
          args:
            executable: /bin/bash
          become: false
          register: homebrew_result
          failed_when: "'FAILED' in homebrew_result.stderr"

        - name: Update .zshrc
          ansible.builtin.lineinfile:
            path: /home/{{ ansible_user_id }}/.zshrc
            line: |

              eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
      when: not homebrew.stat.exists

    - name: Install Victor Mono Nerd Font
      community.general.homebrew:
        name: font-victor-mono-nerd-font
        state: present
        install_options: ['cask']

    # - name: Install Homebrew packages
    #   community.general.homebrew:
    #     state: present
    #     install_options:
    #       - formula
    #       - quiet
    #     name:
    #       - bat
    #       - bfg
    #       - cmatrix
    #       - dust
    #       - fd
    #       - font-victor-mono-nerd-font
    #       - fping
    #       - fzf
    #       - gcc
    #       - go
    #       - iftop
    #       - ipcalc
    #       - iperf3
    #       - jq
    #       - kubectl
    #       - lazygit
    #       - lsd
    #       - luarocks
    #       - mtr
    #       - neovim
    #       - netpbm
    #       - nload
    #       - nmap
    #       - node
    #       - nuttcp
    #       - procs
    #       - python@3.13
    #       - ripgrep
    #       - rust
    #       - sd
    #       - starship
    #       - stylua
    #       - tmux
    #       - tokei
    #       - tre-command
    #       - utf8proc
    #       - uv
    #       - wget
    #       - xmlstarlet
    #       - xq
    #       - yarn
    #       - yq
    #       - zoxide
    #       - zsh-vi-mode
    #       - zsh-syntax-highlighting

    - name: Check if venv dir exists
      ansible.builtin.stat:
        path: ~/venv
      register: venv

    - name: Create Python venv
      block:
        - name: Create Python venv dir
          ansible.builtin.file:
            path: ~/venv
            state: directory

        - name: Create Python venv
          ansible.builtin.shell: python3.13 -m venv ~/venv/3.13
          args:
            executable: /bin/bash
          become: false
          register: python_result
          failed_when: "'FAILED' in python_result.stderr"
      when: not venv.stat.exists

    - name: Stow dotfiles
      ansible.builtin.shell:
        cmd: ~/.dotfiles/linux/stow/stow.sh
        chdir: ~/.dotfiles/linux/stow

    - name: Clone Tmux TPM repository
      ansible.builtin.git:
        repo: https://github.com/tmux-plugins/tpm
        dest: ~/.config/tmux/plugins/tpm
        clone: yes
        update: yes

